[{"D:\\WORK\\Programming\\React\\capital-react\\src\\index.js":"1","D:\\WORK\\Programming\\React\\capital-react\\src\\CapitalFooter.js":"2","D:\\WORK\\Programming\\React\\capital-react\\src\\CapitalModule.js":"3","D:\\WORK\\Programming\\React\\capital-react\\src\\Capital.js":"4","D:\\WORK\\Programming\\React\\capital-react\\src\\CapitalHeader.js":"5","D:\\WORK\\Programming\\React\\capital-react\\src\\icons\\Refresh.js":"6","D:\\WORK\\Programming\\React\\capital-react\\src\\modules\\measure\\Measure.js":"7","D:\\WORK\\Programming\\React\\capital-react\\src\\modules\\measure\\MeasureForm.js":"8","D:\\WORK\\Programming\\React\\capital-react\\src\\modules\\material\\Material.js":"9","D:\\WORK\\Programming\\React\\capital-react\\src\\modules\\unitmeasure\\Unitmeasure.js":"10","D:\\WORK\\Programming\\React\\capital-react\\src\\lib\\const.js":"11"},{"size":317,"mtime":1613143920495,"results":"12","hashOfConfig":"13"},{"size":258,"mtime":1611901660359,"results":"14","hashOfConfig":"13"},{"size":1392,"mtime":1613143528276,"results":"15","hashOfConfig":"13"},{"size":408,"mtime":1611896091634,"results":"16","hashOfConfig":"13"},{"size":731,"mtime":1613043982178,"results":"17","hashOfConfig":"13"},{"size":430,"mtime":1612759704397,"results":"18","hashOfConfig":"13"},{"size":12911,"mtime":1613295650615,"results":"19","hashOfConfig":"13"},{"size":7318,"mtime":1613142860295,"results":"20","hashOfConfig":"13"},{"size":698,"mtime":1613143773652,"results":"21","hashOfConfig":"13"},{"size":3506,"mtime":1613143868185,"results":"22","hashOfConfig":"13"},{"size":108,"mtime":1613301415011,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"e7c4t8",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\WORK\\Programming\\React\\capital-react\\src\\index.js",[],["56","57"],"D:\\WORK\\Programming\\React\\capital-react\\src\\CapitalFooter.js",[],["58","59"],"D:\\WORK\\Programming\\React\\capital-react\\src\\CapitalModule.js",[],"D:\\WORK\\Programming\\React\\capital-react\\src\\Capital.js",[],["60","61"],"D:\\WORK\\Programming\\React\\capital-react\\src\\CapitalHeader.js",["62"],"import React from 'react';\r\nimport { Breadcrumb } from 'antd';\r\n\r\nconst CapitalHeader = ()=>{\r\n  const breadcrumbNameMap = {\r\n    '/apps': 'Application List',\r\n    '/apps/1': 'Application1',\r\n    '/apps/2': 'Application2',\r\n    '/apps/1/detail': 'Detail',\r\n    '/apps/2/detail': 'Detail',\r\n  };\r\n  return (\r\n  <div className=\"CapitalHeader\">\r\n    <div>Система Капитал (CapitalHeader)</div>\r\n    <Breadcrumb style={{ margin: '16px 0' }}>\r\n      <Breadcrumb.Item>Капитал</Breadcrumb.Item>\r\n      <Breadcrumb.Item>Справочники</Breadcrumb.Item>\r\n      <Breadcrumb.Item>Справочник мер измерения</Breadcrumb.Item>\r\n    </Breadcrumb>\r\n  </div>\r\n  )\r\n}\r\nexport default CapitalHeader;\r\n",["63","64"],"D:\\WORK\\Programming\\React\\capital-react\\src\\icons\\Refresh.js",[],"D:\\WORK\\Programming\\React\\capital-react\\src\\modules\\measure\\Measure.js",["65"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport '../../resources/css/index.css';\r\nimport '../../resources/css/capital.css';\r\nimport { Layout, Menu, Modal,Form } from 'antd';\r\nimport { Table } from 'antd';\r\nimport reqwest from 'reqwest';\r\nimport { PlusOutlined, EditOutlined, CloseOutlined, PrinterOutlined } from '@ant-design/icons';\r\nimport Refresh from '../../icons/Refresh';\r\nimport { notification } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport * as globalSettings from \"../../lib/const\";\r\nimport MeasureForm from \"./MeasureForm\";\r\n\r\n\r\n// URI для использования формой добавления/изменения\r\nconst URI_ROOT = globalSettings.startURL + \"measure\"\r\nconst URI_SELECT = URI_ROOT + \"/json\"\r\nconst URI_DEL = URI_ROOT + \"/del\"\r\nconst URI_ADD = URI_ROOT + \"/add\"\r\nconst URI_UPD = URI_ROOT + \"/upd\" // для выборки записи по id\r\nconst URI_POST = URI_ROOT + \"/post\"\r\n\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nconst { SubMenu } = Menu;\r\n\r\n// Описание столбцов\r\n// id не надо! - Его описать в key таблицы\r\nconst columns = [\r\n  {\r\n    title: 'Наименование',\r\n    dataIndex: 'name',\r\n    sorter: true,\r\n    width1: '20%',\r\n  },\r\n];\r\n\r\n/**\r\n * Компонент для меры измерения\r\n * @param {*} props \r\n */\r\nconst Measure = ()=>{\r\n  let [currentMenu, setCurrentMenu] = React.useState(\"null\"); // Текущее выбранное меню - непонятно зачем\r\n  let [selectedRowKeys, setSelectedRowKeys] = React.useState([]); // Отмеченные записи, изначально пустой\r\n  let [data,setData] = React.useState(null); // Основной массив данных - пустой сначала\r\n  let [loading,setLoading] = React.useState(false); // Момент загрузки данных для блокировки таблицы для действий\r\n  let [pagination,setPagination] = React.useState({ // Пагинация таблицы, нумерация с 1\r\n    current: 1,\r\n    pageSize: 10,\r\n    total: null, // общее количество считанных записей\r\n  });\r\n  let [sorters, setSorters] = React.useState([{ // Массив сортировки, \r\n    fieldName: \"id\",  // Изначально по id (без сортировки с пагинацией нельзя)\r\n    sortOrder: \"ascend\"\r\n  }]);\r\n  let [totalMax, setTotalMax] = React.useState(0); // Наибольшее количесвто выбранных записей\r\n\r\n  let [formVisible,setFormVisible] = React.useState(false); // Видимость формы ввода\r\n  let [editorContext] = React.useState({ // Данные для формы добавления-изменения\r\n    uriForAdd: URI_ADD,\r\n    uriForUpd: URI_UPD,\r\n    uriForPost: URI_POST,\r\n  });\r\n  const [form] = Form.useForm(); // для эффекта\r\n\r\n  /**\r\n   * Удаление записей\r\n   */\r\n  const deleteRows = () => {\r\n    if (!(selectedRowKeys.length > 0)) {\r\n      notification.info({\r\n        message:\"Нет записей для удаления\",\r\n        description: \"Отметьте одну или несколько записей для удаления\"\r\n      });\r\n      return;\r\n    }\r\n    let ids = selectedRowKeys.join(',');\r\n    console.log('Deleting records ', ids, ' ...');\r\n    setLoading(true); // Блокируем отклики таблицы\r\n    // запрос к REST API на удаление записей\r\n    // globalSettings.startURL устанавливается в const.js\r\n    reqwest({\r\n      url: URI_DEL + '/' + ids,\r\n      contentType: \"application/json; charset=utf-8\",\r\n      method: 'post',\r\n      type: 'json',\r\n    }).then((responseJson) => {\r\n      console.log('responseJson=', responseJson);\r\n      const { errorCode } = responseJson;\r\n      if (errorCode) { // Ошибка есть\r\n        console.log('errorCode=', errorCode);\r\n        const { errorMessage, fieldErrors } = responseJson;\r\n        const description = errorMessage + fieldErrors.id;\r\n        notification.error({\r\n          message:\"Ошибка при удалении записей\",\r\n          description: (description)\r\n        });\r\n        } else { // ошибки нет\r\n          console.log('Удалили ' + ids);\r\n          refreshData();\r\n          const description = \"Удаление \" + selectedRowKeys.length + \" записей выполнено успешно\";\r\n          notification.success({\r\n            message:\"Успешно\",\r\n            description: (description)\r\n          });\r\n      }\r\n      setLoading(false);\r\n      return;\r\n    }).catch((error) => {\r\n      setLoading(false);\r\n      throw (error);\r\n    });\r\n    setLoading(false);\r\n  }\r\n\r\n  /**\r\n   * Вызов формы добавления-изменения\r\n   * @param {*} id \r\n   */\r\n  const callForm = (id) => {\r\n    console.log('calForm - id = ' + id);\r\n    editorContext.id = id;\r\n    setFormVisible(true); // Видимость формы\r\n  }\r\n\r\n  /**\r\n   * Обработчик нажатия меню\r\n   * @param {*} e \r\n   */\r\n  const handleMenuClick = e => {\r\n    console.log('click ', e);\r\n    const { key } = e;\r\n    currentMenu = key;\r\n    setCurrentMenu(setCurrentMenu);\r\n    switch(key) {\r\n      case 'add':\r\n        console.log('add');\r\n        callForm(); // Вызовем форму без установленного параметра id\r\n        break;\r\n      case 'delete':\r\n        if (!(selectedRowKeys.length > 0)) {\r\n          notification.info({\r\n            message:\"Нет записей для удаления\",\r\n            description: \"Отметьте одну или несколько записей для удаления\"\r\n          });\r\n          return;\r\n        }\r\n        const content = \"Вы действительно хотите удалить \" + selectedRowKeys.length + \" записей?\";\r\n        Modal.confirm({\r\n          title: 'Подтверждение удаления',\r\n          icon: <ExclamationCircleOutlined />,\r\n          content: (content),\r\n          okText: 'Да, конечно!',\r\n          cancelText: 'Нет, я ошибся',\r\n          onOk:()=>{\r\n            deleteRows();\r\n          }\r\n        });\r\n        break;\r\n      case 'refresh':\r\n        refreshData();\r\n        break;\r\n      case 'print':\r\n          notification.success({\r\n            message:\"Успешно\",\r\n            description:\"Удаление записей выполнено успешно\"\r\n          });\r\n            break;\r\n      default:\r\n        console.log('Не реализовано ');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Сохранение отметки записей\r\n   * @param {*} selectedRowKeysNew \r\n   */\r\n  const onSelectChange = selectedRowKeysNew => {\r\n    setSelectedRowKeys( selectedRowKeysNew );\r\n  };\r\n\r\n  /**\r\n   * Отмеченные записи \r\n   */\r\n  const rowSelection = {\r\n    selectedRowKeys,\r\n    onChange: onSelectChange,\r\n  };\r\n\r\n  /**\r\n   * Обработчик смены параметров запроса из таблицы\r\n   * @param {*} paginationNew // При смене пагинации\r\n   * @param {*} filters // фильтра\r\n   * @param {*} sorter  // сортировки\r\n   */\r\n  const handleTableChange = (paginationNew, filters, sorter) => {\r\n    console.log('handleTableChange - start');\r\n    if (sorter.field) {\r\n      sorters = [{\r\n        fieldName: sorter.field, \r\n        sortOrder: sorter.order\r\n      }];\r\n      setSorters(sorters);\r\n    }  \r\n    pagination = paginationNew;\r\n    setPagination(pagination);\r\n    refreshData();\r\n    console.log('handleTableChange - finish');\r\n  };\r\n\r\n  /**\r\n   * Основная перевыборка данных\r\n   */\r\n  const refreshData = () => {\r\n    console.log('refreshData - start');\r\n    setLoading(true);\r\n    const gridDataOption = {\r\n      pageNumber: pagination.current - 1,\r\n      pageSize: pagination.pageSize,\r\n      sort: [{fieldName: \"id\"}] // Сортировка по умолчанию\r\n    };\r\n    if (sorters) { // Сортировка установлена - переустановим\r\n      gridDataOption.sort[0].fieldName = sorters[0].fieldName;\r\n      if (sorters[0].sortOrder === \"descend\") {\r\n        gridDataOption.sort[0].direction = 1;\r\n      }\r\n    }\r\n    console.log('gridDataOption=' + JSON.stringify(gridDataOption));\r\n    // Вычисляем total для таблицы\r\n    let total = (gridDataOption.pageNumber + 2) * gridDataOption.pageSize;\r\n    if (total < totalMax) {\r\n      total = totalMax;\r\n    } else {\r\n      setTotalMax(total);\r\n    }\r\n    // запрос к REST API на выборку\r\n    reqwest({\r\n      url: URI_SELECT,\r\n      contentType: \"application/json; charset=utf-8\",\r\n      method: 'post',\r\n      type: 'json',\r\n      data:JSON.stringify(gridDataOption)\r\n    })\r\n      .then(dataNew => {\r\n        setData(dataNew); // данные новые\r\n        setPagination({...pagination, total:  total}); // переустановим total у таблицы\r\n        setSelectedRowKeys([]); // обнулим отмеченные\r\n      },\r\n      // todo Сделать обработку ошибок\r\n      (error) => {\r\n        notification.error({\r\n          message:\"Ошибка при выборке за пределами программы\",\r\n          description: \"error\"\r\n        });\r\n        console.log('refreshData - error=' + error);\r\n      }\r\n    );\r\n    setLoading(false);\r\n    console.log('refreshData - finish');\r\n  }\r\n\r\n  /**\r\n   * Используем побочный эффект для первоначальной выборки \r\n   */\r\n  React.useEffect(() => {\r\n    if(!data) {      // Делаем только если данных нет, иначе начальный refresh выполняется бесконечно\r\n      console.log(\"useEffect - initial refresh\")\r\n      setData([]); // Непонятно зачем\r\n      refreshData();\r\n      console.log(\"useEffect - initial refreshed\")\r\n    }\r\n  }); \r\n\r\n  /**\r\n   * Возвращаем React компонент\r\n   */\r\n  return (\r\n    <div className=\"CapitalModule\">\r\n      <div className=\"Measure\">\r\n      <Layout>\r\n          <Header>\r\n            Справочник мер измерения\r\n          </Header>\r\n            <div>\r\n              <Menu onClick={handleMenuClick} selectedKeys={[currentMenu]} mode=\"horizontal\">\r\n                <SubMenu key=\"Command\" title=\"Команды\">\r\n                    <Menu.Item key=\"add\" icon={<PlusOutlined />}>Добавить</Menu.Item>\r\n                    <Menu.Item key=\"edit\" icon={<EditOutlined />}>Изменить</Menu.Item>\r\n                    <Menu.Item key=\"delete\" icon={<CloseOutlined />}>Удалить</Menu.Item>\r\n                    <Menu.Item key=\"refresh\" icon={<Refresh />}>Обновить</Menu.Item>\r\n                    <Menu.Item key=\"print\" icon={<PrinterOutlined />}>Печать</Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"Spravka\" title=\"Справка\">\r\n                  <Menu.Item key=\"help\">Помощь</Menu.Item>\r\n                    <Menu.Item key=\"about\">\r\n                      <a href=\"http://www.gelicon.biz/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        О программе\r\n                      </a>\r\n                    </Menu.Item>\r\n                </SubMenu>\r\n              </Menu>\r\n            </div>\r\n          <Content>\r\n            <div>\r\n              <Table \r\n                className=\"mod-main-table\" \r\n                rowClassName=\"table-editable-row\"  \r\n                bordered \r\n                size={\"middle\"}\r\n                loading={loading}\r\n                rowSelection={rowSelection} \r\n                columns={columns} \r\n                dataSource={data}\r\n                pagination={pagination}\r\n                onChange={handleTableChange}\r\n                rowKey=\"id\"\r\n                onRow={(record, rowIndex) => {\r\n                  return {\r\n                    onClick: event => callForm(record.id)\r\n                  };\r\n                }}\r\n              />\r\n            </div>\r\n            <MeasureForm \r\n              form={form}\r\n              visible={formVisible}\r\n              editorContext={editorContext}\r\n              afterCancel = {() => {\r\n                setFormVisible(false);\r\n              }}\r\n              afterSave={()=>{\r\n                setFormVisible(false);\r\n                refreshData();\r\n              }}\r\n            >\r\n            </MeasureForm>\r\n          </Content>\r\n          <Footer>Низ Капитал</Footer>\r\n        </Layout>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Measure;\r\n\r\n// https://medium.com/@alef.duarte/using-ant-design-form-inside-a-modal-in-react-stateless-functional-component-634f33357c80\r\n","D:\\WORK\\Programming\\React\\capital-react\\src\\modules\\measure\\MeasureForm.js",["66"],"D:\\WORK\\Programming\\React\\capital-react\\src\\modules\\material\\Material.js",["67","68"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport '../../resources/css/index.css';\r\nimport '../../resources/css/capital.css';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\n\r\nclass Material extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"CapitalModule\">\r\n        <div className=\"Material\">\r\n          <Layout>\r\n            <Header>Справочник материало, товаров, услуг</Header>\r\n            <Content>Контент</Content>\r\n            <Footer>Низ Капитал</Footer>\r\n          </Layout>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Material;\r\n",["69","70"],"D:\\WORK\\Programming\\React\\capital-react\\src\\modules\\unitmeasure\\Unitmeasure.js",["71"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport '../../resources/css/index.css';\r\nimport '../../resources/css/capital.css';\r\nimport { Layout } from 'antd';\r\nimport { Table } from 'antd';\r\nimport reqwest from 'reqwest';\r\nimport { Space } from 'antd';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\n// id не надо\r\nconst columns = [\r\n  {\r\n    title: 'Наименование',\r\n    dataIndex: 'name',\r\n    sorter: true,\r\n    width: '20%',\r\n  },\r\n  {\r\n    title: 'Сокращение',\r\n    dataIndex: 'shortName',\r\n    sorter: true,\r\n    width: '10%',\r\n  },\r\n];\r\n\r\nclass Unitmeasure extends React.Component {\r\n  state = {\r\n    data: [],\r\n    pagination: {\r\n      current: 1,\r\n      pageSize: 10,\r\n    },\r\n    selectedRowKeys: [], // Check here to configure the default column\r\n    loading: false,\r\n  };\r\n  // размещаем побочные эффекты\r\n  componentDidMount() {\r\n    console.log(\"componentDidMount - start\")\r\n    const { pagination } = this.state;\r\n    this.fetch({ pagination });\r\n    console.log(\"componentDidMount - finish\")\r\n  }\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    console.log(\"handleTableChange - start\");\r\n    console.log(\"sorter.field=\" + sorter.field);\r\n    console.log(\"sorter.order=\" + sorter.order);\r\n    this.fetch({\r\n      sortField: sorter.field,\r\n      sortOrder: sorter.order,\r\n      pagination,\r\n      ...filters,\r\n    });\r\n    console.log(\"handleTableChange - finish\");\r\n  };\r\n\r\n  fetch = (params = {}) => {\r\n    console.log(\"fetch - start\");\r\n    this.setState({ loading: true });\r\n    const gridDataOption = {\r\n      pageNumber: params.pagination.current - 1,\r\n      pageSize: params.pagination.pageSize,\r\n      sort: [{fieldName: \"id\"}]\r\n    };\r\n    if (params.sortField) {\r\n      console.log(\"params.sortField=\" + params.sortField);\r\n      gridDataOption.sort[0].fieldName = params.sortField;\r\n      if (params.sortOrder === \"descend\") {\r\n        gridDataOption.sort[0].direction = 1;\r\n        console.log(\"params.sortOrder=descend\");\r\n      }\r\n    }\r\n    // ajax request after empty completing\r\n    reqwest({\r\n      url: 'http://localhost:8080/unitmeasure/json',\r\n      contentType: \"application/json; charset=utf-8\",\r\n      method: 'post',\r\n      type: 'json',\r\n      data:JSON.stringify(gridDataOption)\r\n    }).then(data => {\r\n      //console.log(data);\r\n      this.setState({\r\n        loading: false,\r\n        data: data,\r\n        pagination: {\r\n          ...params.pagination,\r\n          total: 200,\r\n          // 200 is mock data, you should read it from server\r\n          // total: data.totalCount,\r\n        },\r\n      });\r\n      console.log(\"fetch - finish\");\r\n    });\r\n  };\r\n  \r\n\r\n  render() {\r\n    console.log(\"render - start\");\r\n    const { data, pagination, loading } = this.state;\r\n    return (\r\n      <div className=\"CapitalModule\">\r\n        <div className=\"Unitmeasure\">\r\n        <Layout>\r\n            <Header>Справочник единиц измерения</Header>\r\n            <Content>\r\n              <div>\r\n                <Table \r\n                  columns={columns} \r\n                  dataSource={data}\r\n                  pagination={pagination}\r\n                  loading={loading}\r\n                  onChange={this.handleTableChange}\r\n                  rowKey=\"id\"\r\n                />\r\n              </div>\r\n            </Content>\r\n            <Footer>Низ Капитал</Footer>\r\n          </Layout>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Unitmeasure;\r\n",["72","73"],"D:\\WORK\\Programming\\React\\capital-react\\src\\lib\\const.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"78"},{"ruleId":"76","replacedBy":"79"},{"ruleId":"74","replacedBy":"80"},{"ruleId":"76","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":5,"column":9,"nodeType":"84","messageId":"85","endLine":5,"endColumn":26},{"ruleId":"74","replacedBy":"86"},{"ruleId":"76","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":267,"column":3,"nodeType":"90","endLine":267,"endColumn":18,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":133,"column":9,"nodeType":"94","endLine":133,"endColumn":63},{"ruleId":"82","severity":1,"message":"95","line":5,"column":18,"nodeType":"84","messageId":"85","endLine":5,"endColumn":22},{"ruleId":"82","severity":1,"message":"96","line":5,"column":24,"nodeType":"84","messageId":"85","endLine":5,"endColumn":34},{"ruleId":"74","replacedBy":"97"},{"ruleId":"76","replacedBy":"98"},{"ruleId":"82","severity":1,"message":"99","line":8,"column":10,"nodeType":"84","messageId":"85","endLine":8,"endColumn":15},{"ruleId":"74","replacedBy":"100"},{"ruleId":"76","replacedBy":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],["102"],["103"],["102"],["103"],"no-unused-vars","'breadcrumbNameMap' is assigned a value but never used.","Identifier","unusedVar",["102"],["103"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data, refreshData] as a second argument to the useEffect Hook.","MemberExpression",["104"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Menu' is defined but never used.","'Breadcrumb' is defined but never used.",["102"],["103"],"'Space' is defined but never used.",["102"],["103"],"no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},"Add dependencies array: [data, refreshData]",{"range":"107","text":"108"},[8640,8640],", [data, refreshData]"]